name: 'test-document-deploy'
description: 'Test, document, and deploy R packages.'
author: 'Brian M. Schilder'
inputs:
  repository:
    description: 'GitHub repository to be checked.'
    default: ''
  repo-token:
    description: 'Token for the repo. Can be passed in using {{ secrets.PAT_GITHUB }}'
    default: ''
  run_bioccheck:
    description: "Run Bioconductor checks. Must pass in order to continue workflow."
    default: 'true'
  run_crancheck:
    description: "Run CRAN checks. Must pass in order to continue workflow."
    default: 'true'
  has_testthat:
    description: "Run unit tests and report results."
    default: 'true'
  run_covr:
    description: "Run code coverage tests and publish results to codecov."
    default: 'true'
  run_pkgdown:
    description: "Knit the README.Rmd (if available), build documentation website, and deploy to gh-pages branch."
    default: 'true'
  has_RUnit: 
    description: "Run R Unit tests."
    default: 'false'
  cache-version: 
    description: "Which cache version to use."
    default: 'cache-v1'
  run_docker: 
    description: "Whether to build and push a Docker container to DockerHub."
    default: 'false' 
  DOCKER_USERNAME: 
    description: "DockerHub username." 
    default: ''
  DOCKER_ORG: 
    description: "DockerHub organization name." 
    default: ''
  DOCKER_TOKEN:
    description: "DockerHub token."
    default: ''
  runner_os:
    description: "Operating System that the workflow is running on."
    default: 'Linux'
## Environment variables unique to this job.
env: 
  R_KEEP_PKG_SOURCE: yes 
  R_REMOTES_NO_ERRORS_FROM_WARNINGS: true 
  NOT_CRAN: true
  TZ: UTC 
  RGL_USE_NULL: TRUE  
runs:
    using: 'composite'    
    steps:
      ## Set the R library to the directory matching the
      ## R packages cache step further below when running on Docker (Linux).
      - name: Set R Library home on Linux 
        if: ${{ env.runner.os }} == 'Linux'
        run: |
          mkdir -p /__w/_temp/Library
          echo ".libPaths('/__w/_temp/Library')" > ~/.Rprofile
        shell: bash {0}

      ## Most of these steps are the same as the ones in
      ## https://github.com/r-lib/actions/blob/master/examples/check-standard.yaml
      ## If they update their steps, we will also need to update ours.
      - name: Checkout Repository
        uses: actions/checkout@v3

      # R is already included in the Bioconductor docker image,
      # which is only available with Linux as the OS.
      - name: Setup R from r-lib
        if: ${{ env.runner.os }} != 'Linux'
        uses: r-lib/actions/setup-r@v2
        with:
          r-version: ${{ matrix.config.r }}
          http-user-agent: ${{ matrix.config.http-user-agent }}

      ## pandoc is already included in the Bioconductor docker images
      - name: Setup pandoc from r-lib
        if: ${{ env.runner.os }} != 'Linux'
        uses: r-lib/actions/setup-pandoc@v2

      - name: Query dependencies
        run: |
          install.packages('remotes')
          saveRDS(remotes::dev_package_deps(dependencies = TRUE), ".github/depends.Rds", version = 2)
        shell: Rscript {0}

      - name: Restore R package cache
        if: "!contains(github.event.head_commit.message, '/nocache') && ${{ env.runner.os }} != 'Linux'"
        uses: actions/cache@v2
        with:
          path: ${{ env.R_LIBS_USER }}
          key: ${{ env.cache-version }}-${{ env.runner.os }}-biocversion-${{ matrix.config.bioc }}-r-${{ matrix.config.r }}-${{ hashFiles('.github/depends.Rds') }}
          restore-keys: ${{ env.cache-version }}-${{ env.runner.os }}-biocversion-${{ matrix.config.bioc }}-r-${{  matrix.config.r }}-

      - name: Cache R packages on Linux
        if: "!contains(github.event.head_commit.message, '/nocache') && ${{ env.runner.os }} == 'Linux' "
        uses: actions/cache@v2
        with:
          path: /home/runner/work/_temp/Library
          key: ${{ env.cache-version }}-${{ env.runner.os }}-biocversion-${{ matrix.config.bioc }}-r-${{  matrix.config.r }}-${{ hashFiles('.github/depends.Rds') }}
          restore-keys: ${{ env.cache-version }}-${{ env.runner.os }}-biocversion-${{ matrix.config.bioc }}-r-${{  matrix.config.r }}-

      - name: Install Linux system dependencies
        if: ${{ env.runner.os }} == 'Linux'
        run: |
          sysreqs=$(Rscript -e 'cat("apt-get update -y && apt-get install -y", paste(gsub("apt-get install -y ", "", remotes::system_requirements("ubuntu", "20.04")), collapse = " "))')
          echo $sysreqs
          sudo -s eval "$sysreqs"
          sudo apt-get install -y qpdf
        shell: bash {0}

      - name: Install macOS system dependencies
        if: matrix.config.os == 'macOS-latest'
        run: |
          ## Enable installing XML from source if needed
          brew install libxml2
          echo "XML_CONFIG=/usr/local/opt/libxml2/bin/xml2-config" >> $GITHUB_ENV

          ## Required to install magick as noted at
          ## https://github.com/r-lib/usethis/commit/f1f1e0d10c1ebc75fd4c18fa7e2de4551fd9978f#diff-9bfee71065492f63457918efcd912cf2
          brew install imagemagick@6

          ## For textshaping, required by ragg, and required by pkgdown
          brew install harfbuzz fribidi

          ## For installing usethis's dependency gert
          brew install libgit2

          ## Required for tcltk
          brew install xquartz --cask

          ## Required for some ggplot2 functions
          # brew tap homebrew/cask
          # brew tap homebrew/cask-fonts
          # brew install svn
          # brew install --cask font-roboto
          brew install libxfont
        shell: bash {0}

      - name: Install Windows system dependencies
        if: ${{ env.runner.os }} == 'Windows'
        run: |
          npm install curl
        shell: bash {0}

      - name: Install BiocManager
        run: |
          message(paste('****', Sys.time(), 'installing BiocManager ****'))
          remotes::install_cran("BiocManager", upgrade = "never")
        shell: Rscript {0}

      # Linux Bioconductor docker comes with bioconductor installed
      - name: Set BiocVersion
        if: ${{ env.runner.os }} != 'Linux'
        run: |
          #### BiocManager::install doesn't understand "latest" #####
          if("${{ matrix.config.bioc }}" %in% c("latest","release")){
            BiocManager::install(update = TRUE, ask = FALSE)
          } else {
            BiocManager::install(version = "${{ matrix.config.bioc }}", ask = FALSE)
          }
        shell: Rscript {0}

      - name: Install dependencies pass 1
        run: |
          ## Try installing the package dependencies in steps. First the local
          ## dependencies, then any remaining dependencies to avoid the
          ## issues described at
          ## https://stat.ethz.ch/pipermail/bioc-devel/2020-April/016675.html
          ## https://github.com/r-lib/remotes/issues/296
          ## Ideally, all dependencies should get installed in the first pass.

          ## Set the repos source depending on the OS
          ## Alternatively use https://storage.googleapis.com/bioconductor_docker/packages/
          ## though based on https://bit.ly/bioc2021-package-binaries
          ## the Azure link will be the main one going forward.

          bioc_ver <- BiocManager::version()
          gha_repos <- if(
              .Platform$OS.type == "unix" && Sys.info()["sysname"] != "Darwin"
          ) c(
              "AnVIL" = file.path("https://bioconductordocker.blob.core.windows.net/packages",bioc_ver,"bioc"),
              BiocManager::repositories()
              ) else BiocManager::repositories()

          ## For running the checks
          ### hrbrthemes necessary to avoid ggplot2 errors on MacOS: https://stackoverflow.com/a/66423481/13214824

          message(paste('****', Sys.time(), 'installing rcmdcheck and BiocCheck ****'))
          install.packages(c("rcmdcheck", "BiocCheck","rmarkdown"), repos = gha_repos)

          ## Pass #1 at installing dependencies
          ## This pass uses AnVIL-powered fast binaries
          ## details at https://github.com/nturaga/bioc2021-bioconductor-binaries
          ## The speed gains only apply to the docker builds.

          message(paste('****', Sys.time(), 'pass number 1 at installing dependencies: local dependencies ****'))
          remotes::install_local(dependencies = TRUE, repos = gha_repos, build_vignettes = FALSE, upgrade = TRUE)
        continue-on-error: true
        shell: Rscript {0}

      - name: Install dependencies pass 2
        run: |
          ## Pass #2 at installing dependencies
          ## This pass does not use AnVIL and will thus update any packages
          ## that have seen been updated in Bioconductor
          message(paste('****', Sys.time(), 'pass number 2 at installing dependencies: any remaining dependencies ****'))
          remotes::install_local(dependencies = TRUE, repos = BiocManager::repositories(), build_vignettes = TRUE, upgrade = TRUE, force = TRUE)
        continue-on-error: true
        shell: Rscript {0}

      - name: Install dependencies pass 3
        run: |
          ## Pass #3 at installing dependencies
          ## Install via binaries
          message(paste('****', Sys.time(), 'pass number 3 at installing dependencies: any remaining dependencies ****'))
          remotes::install_local(type = "binary", dependencies = TRUE, repos = BiocManager::repositories(), build_vignettes = FALSE, upgrade = TRUE, force = TRUE)
        shell: Rscript {0}

      - name: Install BiocGenerics
        if:  env.has_RUnit == 'true'
        run: |
          ## Install BiocGenerics
          BiocManager::install("BiocGenerics")
        shell: Rscript {0}

      - name: Install covr
        if: (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main') && env.run_covr == 'true' && ${{ env.runner.os }} == 'Linux'
        run: |
          remotes::install_cran("covr")
        shell: Rscript {0}

      - name: Install pkgdown
        if: (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main') && env.run_pkgdown == 'true' && ${{ env.runner.os }} == 'Linux'
        run: |
          remotes::install_github("r-lib/pkgdown")
        shell: Rscript {0}

      - name: Session info
        run: |
          options(width = 100)
          pkgs <- installed.packages()[, "Package"]
          if(!require("sessioninfo")) install.packages("sessioninfo")
          tryCatch({
            sessioninfo::session_info(pkgs, include_base = TRUE)
          }, error = function(x){utils::sessionInfo()})
        shell: Rscript {0}

      - name: Run CMD check
        env:
          _R_CHECK_CRAN_INCOMING_: false
          DISPLAY: 99.0
          AS_CRAN: ${{ env.run_crancheck }}
        run: |
          options(crayon.enabled = TRUE)
          if(!require("sessioninfo")) install.packages("rcmdcheck")
          as_cran <- if(Sys.getenv("AS_CRAN")=='true') "--as-cran" else NULL
          rcmdcheck::rcmdcheck(
              args = c("--no-manual", "--timings", as_cran),
              build_args = c("--no-manual", "--keep-empty-dirs", "--no-resave-data"),
              error_on = "warning",
              check_dir = "check"
          )
        shell: Rscript {0}

      ## Might need an to add this to the if:  && ${{ env.runner.os }} == 'Linux'
      - name: Reveal testthat details
        if:  env.has_testthat == 'true'
        run: find . -name testthat.Rout -exec cat '{}' ';'
        shell: bash {0}

      - name: Run RUnit tests
        if:  env.has_RUnit == 'true'
        run: |
          BiocGenerics:::testPackage()
        shell: Rscript {0}

      - name: Run BiocCheck
        if: env.run_bioccheck == 'true'
        env:
          DISPLAY: 99.0
        run: |
          if(!require("BiocManager")) install.packages("BiocManager")
          if(!require("BiocCheck")) BiocManager::install("BiocCheck")
          BiocCheck::BiocCheck(
              dir('check', 'tar.gz$', full.names = TRUE),
              `quit-with-status` = TRUE,
              `no-check-R-ver` = TRUE,
              `no-check-bioc-help` = TRUE
          )
        shell: Rscript {0}

      - name: Test coverage
        if: (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main') && env.run_covr == 'true' && ${{ env.runner.os }} == 'Linux'
        run: |
          covr::codecov()
        shell: Rscript {0}

      - name: Install package
        if: (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main') && env.run_pkgdown == 'true' && ${{ env.runner.os }} == 'Linux'
        run: R CMD INSTALL .
        shell: bash {0}

      - name: Get R package info
        if: ${{ env.runner.os }} == 'Linux'
        run: |
          #### DockerHub repos must be lowercase (,,) ####
          name=$(grep '^Package:' DESCRIPTION | cut -d\   -f2)
          echo "packageName=${name,,}" >> $GITHUB_ENV
          echo "packageNameOrig=${name}" >> $GITHUB_ENV
          echo $name

          version=$(grep Version DESCRIPTION | grep -o "[0-9.]\+")
          echo "packageVersion=${version}" >> $GITHUB_ENV
          echo $version
        shell: bash {0}

      - name: Render README
        if: (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main') && env.run_pkgdown == 'true' && ${{ env.runner.os }} == 'Linux'
        env:
          DISPLAY: 99.0
        run: |
          if(file.exists("README.Rmd")){
            if(!require("rmarkdown")) install.packages("rmarkdown");
            rmarkdown::render("README.Rmd", output_format = rmarkdown::github_document(html_preview = FALSE));
          }
        shell: Rscript {0}

      - name: Build and deploy pkgdown site
        if: (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main') && env.run_pkgdown == 'true' && ${{ env.runner.os }} == 'Linux'
        run: |
          git config --global --add safe.directory '*'
          git config --local user.name "$GITHUB_ACTOR"
          git config --local user.email "$GITHUB_ACTOR@users.noreply.github.com"
          Rscript -e "pkgdown::deploy_to_branch(new_process = FALSE)"
        shell: bash {0}
        ## Note that you need to run pkgdown::deploy_to_branch(new_process = FALSE)
        ## at least one locally before this will work. This creates the gh-pages
        ## branch (erasing anything you haven't version controlled!) and
        ## makes the git history recognizable by pkgdown.

      - name: Upload check results
        if: failure()
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.runner.os }}-biocversion-${{ matrix.config.bioc }}-r-${{  matrix.config.r }}-results
          path: check

      # DockerHub steps
      - name: Build and push to DockerHub
        if: "!contains(github.event.head_commit.message, '/nodocker') && env.run_docker == 'true' && ${{ env.runner.os }} == 'Linux' "
        uses: docker/build-push-action@v1
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ env.DOCKER_TOKEN }}
          repository: ${{ env.DOCKER_ORG }}/${{ env.packageName }}
          tag_with_ref: true
          tag_with_sha: false
          tags: ${{ env.packageVersion }},latest
          build_args: PKG=${{ env.packageNameOrig }},BIOC=${{ env.run_bioccheck }},GITHUB_PAT=${{ env.repo-token }}

    
    