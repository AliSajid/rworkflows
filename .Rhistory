yml <- yaml::as.yaml(l[seq(grep("---",l)[1],rev(grep("---",l))[1] )])
yaml::read_yaml(l[seq(grep("---",l)[1],rev(grep("---",l))[1] )])
yaml::read_yaml(text = l[seq(grep("---",l)[1],rev(grep("---",l))[1] )])
txt <- l[seq(grep("---",l)[1],rev(grep("---",l))[1] )]
yml <- yaml::read_yaml(text = txt)
yml
yml_lines <- seq(grep("---",l)[1], rev(grep("---",l))[1] )
yml <- yaml::read_yaml(text = l[yml_lines])
yml
yml$params$docker_user
yaml::as.yaml(yml)
strsplit(yaml::as.yaml(yml),"\n")
ymlyml_lines
yml_lines
l
strsplit(yaml::as.yaml(yml),"\n")[[1]]
list(strsplit(yaml::as.yaml(yml),"\n")[[1]])
as.list(strsplit(yaml::as.yaml(yml),"\n")[[1]])
strsplit(yaml::as.yaml(yml),"\n")[[1]]
paste("---",strsplit(yaml::as.yaml(yml),"\n")[[1]],"---",sep="\n")
paste0("---\n",strsplit(yaml::as.yaml(yml),"\n")[[1]],"\n---")
strsplit(yaml::as.yaml(yml),"\n")
paste0("---\n",strsplit(yaml::as.yaml(yml),"\n")[[1]],"\n---")
c("---\n",strsplit(yaml::as.yaml(yml),"\n")[[1]],"\n---")
c("---",strsplit(yaml::as.yaml(yml),"\n")[[1]],"---")
l[yml_lines] <- c("---",strsplit(yaml::as.yaml(yml),"\n")[[1]],"---")
length(c("---",strsplit(yaml::as.yaml(yml),"\n")[[1]],"---"))
length(l[yml_lines])
yml_lines
l[yml_lines]
utils::download.file(
url = paste(
"https://github.com/neurogenomics/templateR/raw/master",
"vignettes","docker.Rmd",sep="/"
),
destfile = path)
l <- readLines(path)
l
yml_lines <- seq(grep("---",l)[1],
rev(grep("---",l))[1] )
yml <- yaml::read_yaml(text = l[yml_lines])
rev(grep("---",l))
rev(grep("---",l))[1]
grep("---",l)[1]
yml_lines <- seq(grep("---",l)[1],
rev(grep("---",l))[1] )
yml <- yaml::read_yaml(text = l[yml_lines])
l[yml_lines]
length(c("---",strsplit(yaml::as.yaml(yml),"\n")[[1]],"---"))
l[-yml_lines]
is(l[-yml_lines])
new_rmd <-c("---",strsplit(yaml::as.yaml(yml),"\n")[[1]],"---",
l[-yml_lines])
new_rmd
writeLines(new_rmd,path)
path
writeLines(text = new_rmd,
con = path)
yml
new_rmd
yml
yml_txt <- gsub("''","\"",yaml::as.yaml(yml))
new_rmd <-c("---",strsplit(yml_txt,"\n")[[1]],"---",
l[-yml_lines])
writeLines(text = new_rmd,
con = path)
yml$vignette
gsub(
"%\\VignetteIndexEntry{docker}",
paste0("%\\VignetteIndexEntry{",vignette_index_entry,"}"))
gsub(
"%\\VignetteIndexEntry{docker}",
paste0("%\\VignetteIndexEntry{",vignette_index_entry,"}"),
yml$vignette)
title="docker"
vignette_index_entry=title
gsub(
"%\\VignetteIndexEntry{docker}",
paste0("%\\VignetteIndexEntry{",vignette_index_entry,"}"),
yml$vignette)
vignette_index_entry
paste0("%\\VignetteIndexEntry{",vignette_index_entry,"}")
yml$vignette
gsub(
"%\\VignetteIndexEntry{docker}",
paste0("%\\VignetteIndexEntry{",vignette_index_entry,"}"),
yml$vignette)
gsub(
"%\\VignetteIndexEntry{docker}",
paste0("%\\VignetteIndexEntry{",vignette_index_entry,"}"),
yml$vignette, fixed = TRUE)
url = paste(
"https://github.com/neurogenomics/templateR/raw/master",
"vignettes","docker.Rmd",sep="/"
)
#### Edit the yaml header ###
l <- readLines(url)
l
url
cat(paste(readLines(path),collapse ="\n"))
source("~/Desktop/rworkflows/R/use_vignette_docker.R", echo=TRUE)
path <- use_vignette_docker(save_dir=tempdir())
library(rworkflows)
path <- use_vignette_docker(docker_user="", save_dir=tempdir())
devtools::document()
library(rworkflows)
path <- use_vignette_docker(docker_user="", save_dir=tempdir())
library(rworkflows)
path <- use_vignette_docker(docker_user="", save_dir=tempdir())
devtools::document()
path <- use_vignette_docker(docker_org = "neurogenomicslab",
save_dir=tempdir())
file.remove(path)
path <- use_vignette_docker(docker_org = "neurogenomicslab",
save_dir=tempdir())
library(rworkflows)
file.remove(path)
path <- use_vignette_docker(docker_org = "neurogenomicslab",
save_dir=tempdir())
path
#### get the template ####
URL <- paste("https://github.com/neurogenomics/templateR/raw/master",
"vignettes","docker.Rmd",sep="/")
#### Edit the yaml header ###
l <- readLines(URL)
library(rworkflows)
path <- use_vignette_docker(docker_org = "neurogenomicslab",
save_dir=tempdir())
path <- use_vignette_docker(docker_org = "neurogenomicslab")
devtools::document()
library(rworkflows)
usethis::use_test()
test_that("use_vignette_docker works", {
path <- use_vignette_docker(docker_org = "neurogenomicslab",
save_dir = tempdir())
})
path <- use_vignette_docker(docker_org = "neurogenomicslab",
save_dir = tempdir())
testthat::expect_true(file.exists(path))
biocthis::use_bioc_vignette()
biocthis::use_bioc_vignette(name = "gg")
#### get the template ####
template_path <- system.file("templates","templateR.Rmd",
package = "rworkflows")
template_path
devtools::document()
library(rworkflows)
#### get the template ####
template_path <- system.file("templates","docker.Rmd",
package = "rworkflows")
template_path
#### get the template ####
template_path <- system.file("templates","templateR.Rmd",
package = "rworkflows")
#### Edit the yaml header ###
l <- readLines(template_path)
yml_lines <- seq(grep("---",l)[1],
rev(grep("---",l))[1] )
yml <- yaml::read_yaml(text = l[yml_lines])
yml
library(rworkflows)
path <- use_vignette_getstarted(package = "mypackage",
save_dir = tempdir())
path
browseURL(path)
browseURL(path)
browseURL(path)
usethis::use_test()
devtools::document()
library(rworkflows)
path <- use_vignette_docker(docker_org = "neurogenomicslab",
save_dir = tempdir())
usethis::use_test()
devtools::document()
library(rworkflows)
path=file.path(save_dir,
"README.Rmd")
save_dir=here::here()
path=file.path(save_dir,
"README.Rmd")
#### get the template ####
template_path <- system.file("templates","README.Rmd",
package = "rworkflows")
file.copy(from = template_path, to = path)
cat(paste(readLines(path),collapse ="\n"))
template_path
template_path
path
save_dir = tempdir()
path=file.path(save_dir,
"README.Rmd")
file.copy(from = template_path, to = path)
devtools::document()
library(rworkflows)
library(rworkflows)
res <- echodeps::dep_graph(pkg_name = "rworkflows",
method = "github",shape = "hexagon")
#### Create graph ####
dgc_out <- echodeps::dep_graph_create(pkg_name = "rworkflows",
method = "github",
node_size = "clones_uniques")
library(rworkflows)
#### Create graph ####
dgc_out <- echodeps::dep_graph_create(pkg_name = "rworkflows",
method = "github",
node_size = "clones_uniques")
#### Subset graph ####
## Remove repos that are auotmatically created by GitHub to check actions
## published on the GitHub Actions marketplace.
g <- dgc_out$subgraph
exclude <- grep("actions-marketplace-validations",
names(igraph::V(g)),value = TRUE)
g2 <- echodeps::subset_graph(g=g, exclude=exclude)
#### Plot graph ####
vis <- echodeps::dep_graph_plot(g = g2,
shape = "hexagon",
pkg_name = dgc_out$pkg_name,
save_path = here::here("inst","r",
"dep_graph.html"))
#### Plot graph ####
vis <- echodeps::dep_graph_plot(g = g2,
shape = "hexagon",
pkg_name = dgc_out$pkg_name,
save_path = here::here(
"depgraph","rworkflows_depgraph.html"))
#### Remove temp files ####
file.remove(here::here("depgraph","rworkflows_depgraph_files"))
#### Remove temp files ####
unlink(here::here("depgraph","rworkflows_depgraph_files"))
#### Remove temp files ####
unlink(here::here("depgraph","rworkflows_depgraph_files"), recursive = TRUE)
htmltools::includeHTML("https://github.com/neurogenomics/rworkflows/raw/master/depgraph/rworkflows_depgraph.html")
#### Plot graph ####
colors <- echodeps::construct_colors()
#### Plot graph ####
colors <- echodeps::construct_colors(save_background = "transparent")
vis <- echodeps::dep_graph_plot(g = g2,
shape = "hexagon",
pkg_name = dgc_out$pkg_name,
save_path = here::here(
"depgraph","rworkflows_depgraph.html"))
#### Plot graph ####
colors <- echodeps::construct_colors(save_background = "white")
vis <- echodeps::dep_graph_plot(g = g2,
shape = "hexagon",
pkg_name = dgc_out$pkg_name,
save_path = here::here(
"depgraph","rworkflows_depgraph.html"))
#### Plot graph ####
colors <- echodeps::construct_colors(background = "white")
vis <- echodeps::dep_graph_plot(g = g2,
shape = "hexagon",
pkg_name = dgc_out$pkg_name,
save_path = here::here(
"depgraph","rworkflows_depgraph.html"))
vis <- echodeps::dep_graph_plot(g = g2,
shape = "hexagon",
pkg_name = dgc_out$pkg_name,
colors = colors,
save_path = here::here(
"depgraph","rworkflows_depgraph.html"))
#### Plot graph ####
colors <- echodeps::construct_colors(save_background = "white",
background = "white")
vis <- echodeps::dep_graph_plot(g = g2,
shape = "hexagon",
pkg_name = dgc_out$pkg_name,
colors = colors,
save_path = here::here(
"depgraph","rworkflows_depgraph.html"))
#### Plot graph ####
colors <- echodeps::construct_colors(background = "white")
vis <- echodeps::dep_graph_plot(g = g2,
shape = "hexagon",
pkg_name = dgc_out$pkg_name,
colors = colors,
save_path = here::here(
"depgraph","rworkflows_depgraph.html"))
#### Plot graph ####
colors <- echodeps::construct_colors(save_background = "transparent",
background = "transparent")
vis <- echodeps::dep_graph_plot(g = g2,
shape = "hexagon",
pkg_name = dgc_out$pkg_name,
colors = colors,
save_path = here::here(
"depgraph","rworkflows_depgraph.html"))
?requireNamespace()
library(rworkflows)
library(rworkflows)
devtools::document()
workflow <- rworkflows::use_workflow(run_bioccheck = FALSE,
run_rcmdcheck = TRUE,
run_pkgdown = TRUE,
run_docker = TRUE,
docker_user = "bschilder",
docker_org = "neurogenomicslab",
## Use defaults in practice
save_dir = tempdir())
templateR:::source_all()
templateR:::args2vars(use_workflow)
docker_org <- eval(docker_org)
docker_user = "bschilder"
docker_org = "neurogenomicslab"
run_docker = TRUE
## Custom handler prevents "on" from being converted to TRUE
yml <- get_yaml(name = name)
yml <- fill_yaml(yml=yml,
## action-level args
name=name,
tag=tag,
on=on,
branches=branches,
## workflow-level args
run_bioccheck=run_bioccheck,
run_rcmdcheck=run_rcmdcheck,
as_cran=as_cran,
run_vignettes=run_vignettes,
has_testthat=has_testthat,
run_covr=run_covr,
run_pkgdown=run_pkgdown,
has_runit=has_runit,
run_docker=run_docker,
github_token=github_token,
docker_user=docker_user,
docker_org=docker_org,
docker_token=docker_token,
cache_version=cache_version,
enable_act=enable_act)
#### name ####
yml$name <- name
#### on ####
on2 <- lapply(stats::setNames(on,on),
function(x){list("branches"=branches)})
yml$on <- on2
#### static workflow vs. action ####
if(name=="rworkflows_static"){
with2 <- yml$env
} else if(name=="rworkflows"){
#### Set tag ####
yml$jobs[[1]]$steps[[2]]$uses <- paste0("neurogenomics/",name,tag)
#### with: args ####
with2 <- yml$jobs[[1]]$steps[[2]]$with
### Enable running workflow locally with act ####
if(isFALSE(enable_act)){
yml$jobs[[1]]$steps[[1]] <- NULL
}
}
#### Supply variables as "with:" or "env:" ####
with2$run_bioccheck <- run_bioccheck
with2$run_rcmdcheck <- run_rcmdcheck
with2$as_cran <- as_cran
with2$run_vignettes <- run_vignettes
with2$has_testthat <- has_testthat
with2$run_covr <- run_covr
with2$run_pkgdown <- run_pkgdown
with2$has_runit <- has_runit
with2$GITHUB_TOKEN <- github_token
with2$run_docker <- run_docker
with2$docker_user <- docker_user
with2$docker_org <- docker_org
with2$DOCKER_TOKEN <- docker_token
with2$cache_version <- cache_version
#### static workflow vs. action ####
if(name=="rworkflows_static"){
yml$env <- with2
} else if(name=="rworkflows"){
#### replace with: args ####
yml$jobs[[1]]$steps[[2]]$with <- with2
}
yml$env
name
yml$jobs
yml$jobs[[1]]
yml$jobs[[1]]$steps
yml$jobs[[1]]$steps[[2]]
rev(yml$jobs[[1]]$steps)
rev(yml$jobs[[1]]$steps)[[1]]$with
#### replace with: args ####
rev(yml$jobs[[1]]$steps)[[1]]$with <- with2
rev(yml$jobs[[1]]$steps)
#### replace with: args ####
rev(yml$jobs[[1]]$steps)[[1]]$with <- with2
rev(yml$jobs[[1]]$steps)
rev(yml$jobs[[1]]$steps)[[1]]$with
utils::tail(yml$jobs[[1]]$steps)[[1]]
#### replace with: args ####
utils::tail(yml$jobs[[1]]$steps)[[1]]$with <- with2
yml$jobs[[1]]$steps
names(yml$jobs[[1]]$steps)
#### replace with: args ####
steps <- yml$jobs[[1]]$steps
steps
steps[[length(steps)]]$with
steps[[length(steps)]]$with <- with2
devtools::document()
source("~/Desktop/rworkflows/R/fill_yaml.R", echo=TRUE)
yml <- fill_yaml(yml=yml,
## action-level args
name=name,
tag=tag,
on=on,
branches=branches,
## workflow-level args
run_bioccheck=run_bioccheck,
run_rcmdcheck=run_rcmdcheck,
as_cran=as_cran,
run_vignettes=run_vignettes,
has_testthat=has_testthat,
run_covr=run_covr,
run_pkgdown=run_pkgdown,
has_runit=has_runit,
run_docker=run_docker,
github_token=github_token,
docker_user=docker_user,
docker_org=docker_org,
docker_token=docker_token,
cache_version=cache_version,
enable_act=enable_act)
scKirby::source_all()
## Custom handler prevents "on" from being converted to TRUE
yml <- get_yaml(name = name)
yml <- fill_yaml(yml=yml,
## action-level args
name=name,
tag=tag,
on=on,
branches=branches,
## workflow-level args
run_bioccheck=run_bioccheck,
run_rcmdcheck=run_rcmdcheck,
as_cran=as_cran,
run_vignettes=run_vignettes,
has_testthat=has_testthat,
run_covr=run_covr,
run_pkgdown=run_pkgdown,
has_runit=has_runit,
run_docker=run_docker,
github_token=github_token,
docker_user=docker_user,
docker_org=docker_org,
docker_token=docker_token,
cache_version=cache_version,
enable_act=enable_act)
yml
yml <- yaml::read_yaml(
system.file("templates","rworkflows_template.yml",
package = "rworkflows"),
handlers = handlers)
workflow_nms <- c("rworkflows","rworkflows_static")
handlers <- list('bool#yes' = function(x) { if (x == "on") x else TRUE})
name
yml <- yaml::read_yaml(
system.file("templates","rworkflows_template.yml",
package = "rworkflows"),
handlers = handlers)
yml <- yaml::read_yaml(
system.file("templates","rworkflows_template_static.yml",
package = "rworkflows"),
handlers = handlers)
yml <- yaml::read_yaml(
system.file("templates","rworkflows_template.yml",
package = "rworkflows"),
handlers = handlers)
yml2=yaml::read_yaml(
system.file("templates","rworkflows_template_static.yml",
package = "rworkflows"),
handlers = handlers)
yml
action <- yaml::read_yaml(
"https://github.com/neurogenomics/rworkflows/raw/master/action.yml")
action
names(yml2)
action$name
# yml <- yaml::read_yaml(
#   system.file("templates","rworkflows_template_static.yml",
#               package = "rworkflows"),
#   handlers = handlers)
#### Recursion ####
yml <- get_yaml(name="rworkflows")
yml
yml$on
library(rworkflows)
yml <- yaml::read_yaml(
system.file("templates","rworkflows_template_static.yml",
package = "rworkflows"),
handlers = handlers)
yml$on
yml$jobs$rworkflows_static$steps
action$runs$steps
yml$jobs$rworkflows_static$steps <- action$runs$steps
gh::gh(owner="neurogenomics",repo="rworkflows")
gh::gh_tree_remote)
gh::gh_tree_remote()
devtools::document()
devtools::check_man()
library(rworkflows)
library(rworkflows)
workflow <- rworkflows::use_workflow(run_bioccheck = FALSE,
run_rcmdcheck = TRUE,
run_pkgdown = TRUE,
run_docker = TRUE,
docker_user = "bschilder",
docker_org = "neurogenomicslab",
## Use defaults in practice
save_dir = tempdir())
workflow <- rworkflows::use_workflow(run_bioccheck = FALSE,
run_rcmdcheck = TRUE,
run_pkgdown = TRUE,
run_docker = TRUE,
docker_user = "bschilder",
docker_org = "neurogenomicslab")
