path <- use_workflow(save_dir = file.path(tempdir(),".github","workflows"))
testthat::expect_true(file.exists(path))
devtools::check_man()
devtools::document()
devtools::check_man()
library(rworkflows)
?rcmdcheck
devtools::document()
library(rworkflows)
path <- use_workflow(save_dir = file.path(tempdir(),".github","workflows"))
use_workflow()
shQuote("RELEASE_**")
devtools::document()
library(rworkflows)
use_workflow()
library(rworkflows)
devtools::document()
library(rworkflows)
use_workflow()
devtools::document()
library(rworkflows)
use_workflow()
use_workflow(docker_user = "bschilder")
use_workflow(docker_user = "bschilder", "neurogenomicslab")
use_workflow(docker_user = "bschilder", docker_org = "neurogenomicslab")
?badge_github_actions
devtools::document()
devtools::document()
templateR:::source_all()
templateR:::args2vars(use_workflow)
docker_org <- eval(docker_org)
## Custom handler prevents "on" from being converted to TRUE
handlers <- list('bool#yes' = function(x) { if (x == "on") x else TRUE})
if(is.null(name) || name=="rworkflows"){
yml <- yaml::read_yaml(
system.file("yaml","rworkflows_template.yml",
package = "rworkflows"),
handlers = handlers)
#### name ####
yml$name <- name
#### on ####
on2 <- lapply(stats::setNames(on,on),
function(x){list("branches"=branches)})
yml$on <- on2
#### with: args ####
with2 <- yml$jobs[[1]]$steps[[2]]$with
with2$run_bioccheck <- run_bioccheck
with2$run_rcmdcheck <- run_rcmdcheck
with2$as_cran <- as_cran
with2$run_vignettes <- run_vignettes
with2$has_testthat <- has_testthat
with2$run_covr <- run_covr
with2$run_pkgdown <- run_pkgdown
with2$has_runit <- has_runit
with2$GITHUB_TOKEN <- github_token
with2$run_docker <- run_docker
with2$docker_user <- docker_user
with2$docker_org <- docker_org
with2$DOCKER_TOKEN <- docker_token
with2$cache_version <- cache_version
#### replace with: args ####
yml$jobs[[1]]$steps[[2]]$with <- with2
### Enable running workflow locally with act ####
if(isFALSE(enable_act)){
yml$jobs[[1]]$steps[[1]] <- NULL
}
}
yml
yml
yml$jobs[[1]]$steps
#### with: args ####
yml$jobs[[1]]$steps[[2]]$uses
paste0("neurogenomics/",name,tag)
devtools::document()
library(rworkflows)
devtools::document()
devtools::check_man()
devtools::check_man()
devtools::document()
devtools::check_man()
devtools::check_man
devtools::document()
library(rworkflows)
use_workflow()
devtools::document()
library(rworkflows)
BiocCheck::BiocCheck()
devtools::document()
library(rworkflows)
devtools::document()
use_workflow(run_docker=TRUE,
docker_user="bschilder",
docker_org="neurogenomicslab")
rworkflows::use_workflow()
use_workflow(run_docker=TRUE,
docker_user="bschilder",
docker_org="neurogenomicslab")
rworkflows:use_workflow(run_docker=TRUE,
docker_user="bschilder",
docker_org="neurogenomicslab")
rworkflows::use_workflow(run_docker=TRUE,
docker_user="bschilder",
docker_org="neurogenomicslab")
?rworkflows::use_workflow()
?biocthis::use_bioc_github_action()
?biocthis
??biocthis
cite("rcmdcheck")
citation("rcmdchecl")
citation("rcmdcheck")
citation("BiocCheck")
citation("roxygen2")
citation("pkgdown")
citation("badger")
citation("RUnit")
workflow_nms <- c("rworkflows","rworkflows_static")
workflow_nms <- c("rworkflows","rworkflows_static")
tolower(NULL)
tolower(NULL)[1]
NULL==NA
stp <- paste("name must be one of:",
paste("\n -",workflow_nms,collapse = ""))
stop(stp)
stp <- paste("name must be one of:",
paste("\n -",shQuote(workflow_nms),collapse = ""))
stop(stp)
stp <- paste("`name` must be one of:",
paste("\n -",shQuote(workflow_nms),collapse = ""))
stop(stp)
source("~/Desktop/rworkflows/R/get_yaml.R", echo=TRUE)
devtools::document()
devtools::document()
library(rworkflows)
templateR:::source_all()
templateR:::args2vars(use_workflow)
docker_org <- eval(docker_org)
## Custom handler prevents "on" from being converted to TRUE
yml <- get_yaml(name = name)
name="rworkflows_static"
## Custom handler prevents "on" from being converted to TRUE
yml <- get_yaml(name = name)
#### name ####
yml$name <- name
#### on ####
on2 <- lapply(stats::setNames(on,on),
function(x){list("branches"=branches)})
yml$on <- on2
#### with: args ####
yml$jobs[[1]]$steps[[2]]$uses <- paste0("neurogenomics/",name,tag)
with2 <- yml$jobs[[1]]$steps[[2]]$with
with2$run_bioccheck <- run_bioccheck
with2$run_rcmdcheck <- run_rcmdcheck
with2$as_cran <- as_cran
with2$run_vignettes <- run_vignettes
with2$has_testthat <- has_testthat
with2$run_covr <- run_covr
with2$run_pkgdown <- run_pkgdown
with2$has_runit <- has_runit
with2$GITHUB_TOKEN <- github_token
with2$run_docker <- run_docker
with2$docker_user <- docker_user
with2$docker_org <- docker_org
with2$DOCKER_TOKEN <- docker_token
with2$cache_version <- cache_version
#### replace with: args ####
yml$jobs[[1]]$steps[[2]]$with <- with2
### Enable running workflow locally with act ####
if(isFALSE(enable_act)){
yml$jobs[[1]]$steps[[1]] <- NULL
}
#### Preview ####
if(isTRUE(preview)){
cat(yaml::as.yaml(yml))
}
#### Write to disk ####
if(!is.null(save_dir)){
path <- file.path(save_dir,paste0(name,".yml"))
dir.create(dirname(path),showWarnings = FALSE, recursive = TRUE)
messager("Saving workflow ==>",path,v=verbose)
#### Write bools as true/false rather than yes/no (default) ####
handlers2 <- list('bool#yes' = function(x){"${{ true }}"},
'bool#no' = function(x){"${{ false }}"})
yml2 <- yaml::yaml.load(yaml::as.yaml(yml), handlers = handlers2)
yaml::write_yaml(x = yml2,
file = path)
#### Return ####
if(isTRUE(return_path)){
return(path)
} else {
return(yml)
}
} else {
return(yml)
}
name
source("~/Desktop/rworkflows/R/get_yaml.R", echo=TRUE)
## Custom handler prevents "on" from being converted to TRUE
yml <- get_yaml(name = name)
yml
name
workflow_nms <- c("rworkflows","rworkflows_static")
name=workflow_nms[2]
names
name
handlers <- list('bool#yes' = function(x) { if (x == "on") x else TRUE})
is.null(name)
tolower(name)=="rworkflows"
tolower(name)=="rworkflows_static"
yml <- yaml::read_yaml(
system.file("yaml","rworkflows_template_static.yml",
package = "rworkflows"),
handlers = handlers)
yml
source("~/Desktop/rworkflows/R/get_yaml.R", echo=TRUE)
## Custom handler prevents "on" from being converted to TRUE
yml <- get_yaml(name = name)
yml
#### name ####
yml$name <- name
#### on ####
on2 <- lapply(stats::setNames(on,on),
function(x){list("branches"=branches)})
yml$on <- on2
#### with: args ####
yml$jobs[[1]]$steps[[2]]$uses <- paste0("neurogenomics/",name,tag)
with2 <- yml$jobs[[1]]$steps[[2]]$with
with2$run_bioccheck <- run_bioccheck
with2$run_rcmdcheck <- run_rcmdcheck
with2$as_cran <- as_cran
with2$run_vignettes <- run_vignettes
with2$has_testthat <- has_testthat
with2$run_covr <- run_covr
with2$run_pkgdown <- run_pkgdown
with2$has_runit <- has_runit
with2$GITHUB_TOKEN <- github_token
with2$run_docker <- run_docker
with2$docker_user <- docker_user
with2$docker_org <- docker_org
with2$DOCKER_TOKEN <- docker_token
with2$cache_version <- cache_version
#### replace with: args ####
yml$jobs[[1]]$steps[[2]]$with <- with2
### Enable running workflow locally with act ####
if(isFALSE(enable_act)){
yml$jobs[[1]]$steps[[1]] <- NULL
}
#### Preview ####
if(isTRUE(preview)){
cat(yaml::as.yaml(yml))
}
#### Write to disk ####
if(!is.null(save_dir)){
path <- file.path(save_dir,paste0(name,".yml"))
dir.create(dirname(path),showWarnings = FALSE, recursive = TRUE)
messager("Saving workflow ==>",path,v=verbose)
#### Write bools as true/false rather than yes/no (default) ####
handlers2 <- list('bool#yes' = function(x){"${{ true }}"},
'bool#no' = function(x){"${{ false }}"})
yml2 <- yaml::yaml.load(yaml::as.yaml(yml), handlers = handlers2)
yaml::write_yaml(x = yml2,
file = path)
#### Return ####
if(isTRUE(return_path)){
return(path)
} else {
return(yml)
}
} else {
return(yml)
}
## Custom handler prevents "on" from being converted to TRUE
yml <- get_yaml(name = name)
#### on ####
on2 <- lapply(stats::setNames(on,on),
function(x){list("branches"=branches)})
yml$on <- on2
yml$jobs[[1]]$steps[[2]]$with
## Custom handler prevents "on" from being converted to TRUE
yml <- get_yaml(name = name)
yml
## Custom handler prevents "on" from being converted to TRUE
yml <- get_yaml(name = name)
#### name ####
yml$name <- name
#### on ####
on2 <- lapply(stats::setNames(on,on),
function(x){list("branches"=branches)})
yml$on <- on2
#### static workflow vs. action ####
if(name=="rworkflows_static"){
} else if(name=="rworkflows"){
#### with: args ####
yml$jobs[[1]]$steps[[2]]$uses <- paste0("neurogenomics/",name,tag)
with2 <- yml$jobs[[1]]$steps[[2]]$with
with2$run_bioccheck <- run_bioccheck
with2$run_rcmdcheck <- run_rcmdcheck
with2$as_cran <- as_cran
with2$run_vignettes <- run_vignettes
with2$has_testthat <- has_testthat
with2$run_covr <- run_covr
with2$run_pkgdown <- run_pkgdown
with2$has_runit <- has_runit
with2$GITHUB_TOKEN <- github_token
with2$run_docker <- run_docker
with2$docker_user <- docker_user
with2$docker_org <- docker_org
with2$DOCKER_TOKEN <- docker_token
with2$cache_version <- cache_version
#### replace with: args ####
yml$jobs[[1]]$steps[[2]]$with <- with2
### Enable running workflow locally with act ####
if(isFALSE(enable_act)){
yml$jobs[[1]]$steps[[1]] <- NULL
}
}
with2 <- yml$env
source("~/Desktop/rworkflows/R/fill_yaml.R", echo=TRUE)
source("~/Desktop/rworkflows/R/fill_yaml.R", echo=TRUE)
## Custom handler prevents "on" from being converted to TRUE
yml <- get_yaml(name = name)
yml <- fill_yaml(yml,
## action-level args
name=name,
tag=tag,
on=on,
branches=branches,
## workflow-level args
run_bioccheck=run_bioccheck,
run_rcmdcheck=run_rcmdcheck,
as_cran=as_cran,
run_vignettes=run_vignettes,
has_testthat=has_testthat,
run_covr=run_covr,
run_pkgdown=run_pkgdown,
has_runit=has_runit,
run_docker=run_docker,
github_token=github_token,
docker_user=docker_user,
docker_org=docker_org,
docker_token=docker_token,
cache_version=cache_version,
enable_act=enable_act)
#### Preview ####
if(isTRUE(preview)){
cat(yaml::as.yaml(yml))
}
cat(yaml::as.yaml(yml))
source("~/Desktop/rworkflows/R/get_yaml.R", echo=TRUE)
scKirby::source_all()
## Custom handler prevents "on" from being converted to TRUE
yml <- get_yaml(name = name)
yml <- fill_yaml(yml,
## action-level args
name=name,
tag=tag,
on=on,
branches=branches,
## workflow-level args
run_bioccheck=run_bioccheck,
run_rcmdcheck=run_rcmdcheck,
as_cran=as_cran,
run_vignettes=run_vignettes,
has_testthat=has_testthat,
run_covr=run_covr,
run_pkgdown=run_pkgdown,
has_runit=has_runit,
run_docker=run_docker,
github_token=github_token,
docker_user=docker_user,
docker_org=docker_org,
docker_token=docker_token,
cache_version=cache_version,
enable_act=enable_act)
#### Preview ####
if(isTRUE(preview)){
cat(yaml::as.yaml(yml))
}
#### Write to disk ####
if(!is.null(save_dir)){
path <- file.path(save_dir,paste0(name,".yml"))
dir.create(dirname(path),showWarnings = FALSE, recursive = TRUE)
messager("Saving workflow ==>",path,v=verbose)
#### Write bools as true/false rather than yes/no (default) ####
handlers2 <- list('bool#yes' = function(x){"${{ true }}"},
'bool#no' = function(x){"${{ false }}"})
yml2 <- yaml::yaml.load(yaml::as.yaml(yml), handlers = handlers2)
yaml::write_yaml(x = yml2,
file = path)
#### Return ####
if(isTRUE(return_path)){
return(path)
} else {
return(yml)
}
} else {
return(yml)
}
devtools::document()
library(rworkflows)
use_workflow("rworkflows_static")
library(rworkflows)
use_workflow("rworkflows_static")
library(rworkflows)
use_workflow("rworkflows_static")
library(rworkflows)
use_workflow("rworkflows_static")
library(rworkflows)
use_workflow("rworkflows_static")
library(rworkflows)
library(rworkflows)
use_workflow("rworkflows_static")
library(rworkflows)
use_workflow("rworkflows_static")
?biocthis::use_bioc_github_action()
devtools::document()
url <- desc::desc_get_field("Authors")
url <- desc::desc_get_field("Authors@R")
authors <- desc::desc_get_field("Authors@R")
authors
fields <- desc::desc_fields()
fields
grep("Authors*",fields,value = TRUE)
afields <- grep("Authors*",fields,value = TRUE)
author_fields <- grep("Authors*",fields,value = TRUE)
authors <- if(length(author_fields)>0){
desc::desc_get_field(author_fields[[1]])
} else {NULL}
authors
authors <- desc::desc_get_field(author_fields[[1]])
authors
auths <- eval(parse(text = gsub('person','c',authors)));
authors <- paste(auths[names(auths)=='given'],
auths[names(auths)=='family'], collapse = ', ')
authors
source("~/Desktop/rworkflows/R/get_authors.R", echo=TRUE)
source("~/Desktop/rworkflows/R/use_badges.R", echo=TRUE)
use_badges()
devtools::document()
devtools::document()
library(rworkflows)
devtools::doc
devtools::document()
library(rworkflows)
rworkflows::use_badges()
dat=data.table::fread("~/Downloads/file_info_main.csv")
dat
dat=data.table::fread("~/Downloads/repo_metrics_main.csv")
dat
stringr::str_split(dat$api_url,"/",n = 2)
dirname(dirname(dat$api_url))
unique(dirname(dirname(dat$api_url)))
13.49 /12.6
12.6/13.49
?pkgdown
devtools::document()
library(rworkflows)
rworkflows::use_badges()
badger::badge_code_size()
badger:::badge_dependencies()
badger:::badge_download_bioc()
h["download_bioc"] <-  badger::badge_bioc_download_rank()
badger::badge_bioc_download_rank()
?
badge_bioc_download
badger::badge_bioc_download(by = "total",
color = "green")
?badge_bioc_download
badger::badge_cran_checks()
badger::?badge_cran_download
?badge_cran_download
badger::badge_cran_release()
?badge_bioc_download
colors = list("github"="black",
"bioc"="green",
"cran"="blue")
colors$bioc
colors = list("github"="black",
"bioc"="green",
"cran"="blue",
"default"="blue")
h <- list()
if(isTRUE(add_version)){
messager("Adding version.",v=verbose)
h["version"] <- badger::badge_github_version(color = colors$github)
}
if(isTRUE(add_actions)){
messager("Adding actions.",v=verbose)
h["version"] <- badger::badge_github_actions(action = action)
}
?badge_cran_release
devtools::document()
library(rworkflows)
rworkflows::use_badges()
devtools::check_man()
devtools::document()
library(rworkflows)
devtools::check_man())
devtools::check_man()
desc::desc_get_field(key = "URL")
desc::desc_get_field(key = "URLd")
desc::desc_get_urls()
desc::desc_get_urls(file = "F")
desc:::desc_fields()
img
hex_url <- paste(URL,"raw",branch,"inst/hex/hex.png",sep="/")
source("~/Desktop/rworkflows/R/get_hex.R", echo=TRUE)
devtools::document()
library(rworkflows)
rworkflows::use_badges()
devtools::document()
library(rworkflows)
devtools::check_man()
