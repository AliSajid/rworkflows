info <- bioc_r_versions(bioc_version = bioc[[o]])
} else {
info <- list(bioc=bioc[[o]],
r=r[[o]])
}
list(os = o,
bioc=info$bioc,
r=info$r,
cont=cont[[o]],
rspm=rspm[[o]]
)
return(runners)
})
cont = stats::setNames(
list("bioconductor/bioconductor_docker:devel",
NULL,
NULL),
os
)
#### Set runners
runners <- lapply(os, function(o){
if(isTRUE(versions_explicit)){
info <- bioc_r_versions(bioc_version = bioc[[o]])
} else {
info <- list(bioc=bioc[[o]],
r=r[[o]])
}
list(os = o,
bioc=info$bioc,
r=info$r,
cont=cont[[o]],
rspm=rspm[[o]]
)
})
runners
devtools::document()
devtools::document()
devtools::document()
library(rworkflows)
runners <- construct_runners()
runners
usethis::use_test()
testthat::expect_length(runners,3)
names(runners[[1]])
for (r in runners){
all(c("os","bioc","r") %in% names(r))
}
for (r in runners){
testthat::expect_true(all(c("os","bioc","r") %in% names(r)))
}
## Custom handler prevents "on" from being converted to TRUE
yml <- get_yaml(name = name)
templateR:::source_all()
templateR:::args2vars(use_workflow)
docker_org <- eval(docker_org)
#### Check for existing yaml ####
path <- file.path(save_dir,paste0(name,".yml"))
## Custom handler prevents "on" from being converted to TRUE
yml <- get_yaml(name = name)
#### name ####
yml$name <- name
#### on ####
on2 <- lapply(stats::setNames(on,on),
function(x){list("branches"=branches)})
yml$on <- on2
runners <- yml$jobs$rworkflows$strategy$matrix$config
runners
yml$jobs[[1]]$strategy$matrix$config
yml <- yaml::read_yaml("https://bioconductor.org/config.yaml")
yml$versions
?R.Version()
R.Version()
devtools::document()
rversions::r_release()
rversions::r_release()$version
is(rversions::r_release()$version)
package_version(rversions::r_release()$version)
rversions::r_versions()
package_version(rversions::r_release()$version)
package_version(rversions::r_release()$version)
package_version(rversions::r_release()$version)+0.1
package_version(rversions::r_release()$version)
package_version(rversions::r_release()$version)+"0.1"
package_version(rversions::r_release()$version)+package_version("0.1"
package_version(rversions::r_release()$version)+package_version("0.1")
?rversions::r_release()
library(rworkflows)
ver <- bioc_r_versions(bioc_version="devel")
rworkflows::construct_runners(versions_explicit = TRUE)
os=c("ubuntu-latest",
"macOS-latest",
"windows-latest")
cont = stats::setNames(
list(paste0("bioconductor/bioconductor_docker:",
bioc[[1]]),
NULL,
NULL),
os
)
bioc = stats::setNames(
list("devel",
"release",
"release"),
os
)
r = stats::setNames(
list("auto",
"auto",
"auto"),
os
)
cont = stats::setNames(
list(paste0("bioconductor/bioconductor_docker:",
bioc[[1]]),
NULL,
NULL),
os
)
cont
cont[[1]]
cocont[[1]]
co=cont[[1]]
names(cont)
n=names(cont)[[1]]
co <- cont[[n]]
if(is.null(co)) return(NULL)
co
grepl(":",co)
strsplit(co,":")
rev(strsplit(co,":")[[1]])[[1]]
bioc_r_versions(bioc_version = rev(strsplit(co,":")[[1]])[[1]])
info <- bioc_r_versions(bioc_version = rev(strsplit(co,":")[[1]])[[1]])
info$bioc
gsub("[.]","_",info$bioc)
paste0("RELEASE_",gsub("[.]","_",info$bioc))
rev(strsplit(co,":")[[1]])[[1]]
splt <- strsplit(co,":")[[1]]
splt
paste0(splt[[1]],":RELEASE_",gsub("[.]","_",info$bioc))
lapply(names(cont),function(n){
co <- cont[[n]]
if(is.null(co)) return(NULL)
if(grepl(":",co)){
splt <- strsplit(co,":")[[1]]
info <- bioc_r_versions(bioc_version = rev(splt)[[1]])
return(
paste0(splt[[1]],":RELEASE_",gsub("[.]","_",info$bioc))
)
} else {
return(NULL)
}
})
lapply(stats::setNames(
names(cont),names(cont)
),function(n){
co <- cont[[n]]
if(is.null(co)) return(NULL)
if(grepl(":",co)){
splt <- strsplit(co,":")[[1]]
info <- bioc_r_versions(bioc_version = rev(splt)[[1]])
return(
paste0(splt[[1]],":RELEASE_",gsub("[.]","_",info$bioc))
)
} else {
return(NULL)
}
})
source("~/Desktop/rworkflows/R/construct_runners_check_cont.R", echo=TRUE)
cont <- construct_runners_check_cont(cont = cont,
versions_explicit = versions_explicit)
versions_explicit=T
cont <- construct_runners_check_cont(cont = cont,
versions_explicit = versions_explicit)
cont
devtools::document()
library(rworkflows)
runners <- construct_runners()
runners
construct_runners()
bioc_version <- rev(splt)[[1]]
bioc_version <- rev(splt)[[1]]
lapply(stats::setNames(names(cont),
names(cont)
),function(n){
co <- cont[[n]]
if(is.null(co)) return(NULL)
splt <- strsplit(co,":")[[1]]
bioc_version <- rev(splt)[[1]]
if(isTRUE(versions_explicit)){
if(grepl(":",co)){
info <- bioc_r_versions(bioc_version = )
return(
paste0(splt[[1]],":RELEASE_",gsub("[.]","_",info$bioc))
)
} else {
return(co)
}
} else {
if(tolower(bioc_version)=="release"){
bioc_version <- "latest"
}
return(bioc_version)
}
})
lapply(stats::setNames(names(cont),
names(cont)
),function(n){
co <- cont[[n]]
if(is.null(co)) return(NULL)
splt <- strsplit(co,":")[[1]]
bioc_version <- rev(splt)[[1]]
if(isTRUE(versions_explicit)){
if(grepl(":",co)){
info <- bioc_r_versions(bioc_version = bioc_version)
return(
paste0(splt[[1]],":RELEASE_",gsub("[.]","_",info$bioc))
)
} else {
return(co)
}
} else {
if(tolower(bioc_version)=="release"){
bioc_version <- "latest"
}
return(bioc_version)
}
})
cont
bioc_version
bioc_version="RELEASE_3_17"
grepl("RELEASE",bioc_version,ignore.case = TRUE)
gsub("release","",bioc_version)
gsub("release","",bioc_version,ignore.case = TRUE)
gsub("release_","",bioc_version,ignore.case = TRUE)
gsub("RELEASE_","",bioc_version,ignore.case = TRUE)
package_version(gsub("RELEASE_","",bioc_version,ignore.case = TRUE))
gsub("_",".",gsub("RELEASE_","",bioc_version,ignore.case = TRUE))
gsub("_",".",
gsub("RELEASE_","",bioc_version,ignore.case = TRUE)
)
source("~/Desktop/rworkflows/R/bioc_r_versions.R", echo=TRUE)
lapply(stats::setNames(names(cont),
names(cont)
),function(n){
co <- cont[[n]]
if(is.null(co)) return(NULL)
splt <- strsplit(co,":")[[1]]
bioc_version <- rev(splt)[[1]]
if(isTRUE(versions_explicit)){
if(grepl(":",co)){
info <- bioc_r_versions(bioc_version = bioc_version)
return(
paste0(splt[[1]],":RELEASE_",gsub("[.]","_",info$bioc))
)
} else {
return(co)
}
} else {
if(tolower(bioc_version)=="release"){
bioc_version <- "latest"
}
return(bioc_version)
}
})
cont
n
if(is.null(co)) return(NULL)
splt <- strsplit(co,":")[[1]]
bioc_version <- rev(splt)[[1]]
splt
bioc_version <- rev(splt)[[1]]
isTRUE(versions_explicit)
grepl(":",co)
bioc_r_versions(bioc_version = bioc_version)
isTRUE(versions_explicit)
bioc_r_versions(bioc_version = bioc_version)
splt[[1]]
return(
paste0(splt[[1]],":RELEASE_",gsub("[.]","_",info$bioc))
)
paste0(splt[[1]],":RELEASE_",gsub("[.]","_",info$bioc))
lapply(stats::setNames(names(cont),
names(cont)
),function(n){
co <- cont[[n]]
if(is.null(co)) return(NULL)
splt <- strsplit(co,":")[[1]]
bioc_version <- rev(splt)[[1]]
if(isTRUE(versions_explicit)){
if(grepl(":",co)){
info <- bioc_r_versions(bioc_version = bioc_version)
return(
paste0(splt[[1]],":RELEASE_",gsub("[.]","_",info$bioc))
)
} else {
return(co)
}
} else {
if(tolower(bioc_version)=="release"){
bioc_version <- "latest"
}
return(bioc_version)
}
})
cont
gsub("[.]","_",info$bioc)
source("~/Desktop/rworkflows/R/bioc_r_versions.R", echo=TRUE)
lapply(stats::setNames(names(cont),
names(cont)
),function(n){
co <- cont[[n]]
if(is.null(co)) return(NULL)
splt <- strsplit(co,":")[[1]]
bioc_version <- rev(splt)[[1]]
if(isTRUE(versions_explicit)){
if(grepl(":",co)){
info <- bioc_r_versions(bioc_version = bioc_version)
return(
paste0(splt[[1]],":RELEASE_",gsub("[.]","_",info$bioc))
)
} else {
return(co)
}
} else {
if(tolower(bioc_version)=="release"){
bioc_version <- "latest"
}
return(bioc_version)
}
})
library(rworkflows)
lapply(os, function(o){
if(isTRUE(versions_explicit)){
info <- bioc_r_versions(bioc_version = bioc[[o]])
} else {
info <- list(bioc=bioc[[o]],
r=r[[o]])
}
list(os = o,
bioc=info$bioc,
r=info$r,
cont=cont[[o]],
rspm=rspm[[o]]
)
})
templateR:::source_all()
templateR:::args2vars(construct_runners)
#### Check args ####
construct_runners_check_args(os = os,
bioc = bioc,
r = r,
cont = cont)
cont <- construct_runners_check_cont(cont = cont,
versions_explicit = versions_explicit)
#### Set runners
runners <- lapply(os, function(o){
if(isTRUE(versions_explicit)){
info <- bioc_r_versions(bioc_version = bioc[[o]])
} else {
info <- list(bioc=bioc[[o]],
r=r[[o]])
}
list(os = o,
bioc=info$bioc,
r=info$r,
cont=cont[[o]],
rspm=rspm[[o]]
)
})
runners
cont
cont = stats::setNames(
list(paste0("bioconductor/bioconductor_docker:",
bioc[[1]]),
NULL,
NULL),
os
)
cont
lapply(stats::setNames(names(cont),
names(cont)
),function(n){
co <- cont[[n]]
if(is.null(co)) return(NULL)
splt <- strsplit(co,":")[[1]]
bioc_version <- rev(splt)[[1]]
if(isTRUE(versions_explicit)){
if(grepl(":",co)){
info <- bioc_r_versions(bioc_version = bioc_version)
return(
paste0(splt[[1]],":RELEASE_",gsub("[.]","_",info$bioc))
)
} else {
return(co)
}
} else {
if(tolower(bioc_version)=="release"){
bioc_version <- "latest"
}
return(bioc_version)
}
})
names(cont)
n
co <- cont[[n]]
co
if(is.null(co)){
return(NULL)
} else if(!grepl(":",co)) {
return(co)
}
splt <- strsplit(co,":")[[1]]
bioc_version <- rev(splt)[[1]]
splt
bioc_version
isTRUE(versions_explicit)
if(grepl(":",co)){
info <- bioc_r_versions(bioc_version = bioc_version)
return(
paste0(splt[[1]],":RELEASE_",gsub("[.]","_",info$bioc))
)
} else {
return(co)
}
grepl(":",co)
info <- bioc_r_versions(bioc_version = bioc_version)
info
paste0(splt[[1]],":RELEASE_",gsub("[.]","_",info$bioc))
co
lapply(stats::setNames(names(cont),
names(cont)
),function(n){
co <- cont[[n]]
if(is.null(co)){
return(NULL)
} else if(!grepl(":",co)) {
return(co)
}
splt <- strsplit(co,":")[[1]]
bioc_version <- rev(splt)[[1]]
if(isTRUE(versions_explicit)){
if(grepl(":",co)){
info <- bioc_r_versions(bioc_version = bioc_version)
return(
paste0(splt[[1]],":RELEASE_",gsub("[.]","_",info$bioc))
)
} else {
return(co)
}
} else if(tolower(bioc_version)=="release"){
bioc_version <- "latest"
}
return(bioc_version)
})
cont
cont[[n]]
co <- cont[[n]]
if(is.null(co)){
return(NULL)
} else if(!grepl(":",co)) {
return(co)
}
splt <- strsplit(co,":")[[1]]
bioc_version <- rev(splt)[[1]]
if(isTRUE(versions_explicit)){
if(grepl(":",co)){
info <- bioc_r_versions(bioc_version = bioc_version)
return(
paste0(splt[[1]],":RELEASE_",gsub("[.]","_",info$bioc))
)
} else {
return(co)
}
} else if(tolower(bioc_version)=="release"){
bioc_version <- "latest"
}
gsub(":release",":latest",co)
lapply(stats::setNames(names(cont),
names(cont)
),function(n){
co <- cont[[n]]
if(is.null(co)){
return(NULL)
} else if(!grepl(":",co)) {
return(co)
}
splt <- strsplit(co,":")[[1]]
bioc_version <- rev(splt)[[1]]
if(isTRUE(versions_explicit)){
if(grepl(":",co)){
info <- bioc_r_versions(bioc_version = bioc_version)
return(
paste0(splt[[1]],":RELEASE_",gsub("[.]","_",info$bioc))
)
} else {
return(co)
}
} else if(tolower(bioc_version)=="release"){
co <- gsub(":release",":latest",co)
}
return(co)
})
source("~/Desktop/rworkflows/R/construct_runners_check_cont.R", echo=TRUE)
construct_runners_check_cont(cont = cont,
versions_explicit = versions_explicit)
versions_explicit
versions_explicit=T
construct_runners_check_cont(cont = cont,
versions_explicit = versions_explicit)
devtools::document()
library(rworkflows)
library(rworkflows)
