name: 'rworkflows'
description: >
  rworkflows: Full workflow to test, document, and deploy R packages.
author: 'Brian M. Schilder'
branding:
  icon: check-square
  color: green
inputs: 
  run_bioccheck:
    description: >
      Run Bioconductor checks. Must pass in order to continue workflow.
    default: true
  run_rcmdcheck:
    description: >
      Run R CMD checks. Must pass in order to continue workflow.
    default: true
  as_cran:
    description: >
      When running R CMD checks, use the '--as-cran' flag to apply CRAN standards.
  run_vignettes:
    description: >
      Build and check R package vignettes.
    default: true
  run_covr:
    description: >
      Run code coverage tests and publish results to Codecov.
    default: true
  run_pkgdown:
    description: >
      Knit the README.Rmd (if available), build documentation website,
      and deploy to gh-pages branch.
    default: true
  has_testthat:
    description: >
      Run unit tests with the `testthat` package and report the results.
      Requires a subdirectory named 'tests'.
    default: true
  has_runit: 
    description: >
      Run unit tests with the `RUnit` package.
      Requires a subdirectory named 'unitTests'.
    default: false 
  run_docker: 
    description: >
      Whether to build and push a Docker container to DockerHub.
    default: false
  docker_user: 
    description: >
      DockerHub username. 
  docker_org: 
    description: >
      DockerHub organization name. Can be the same as Docker username.
  DOCKER_TOKEN:
    description: >
      DockerHub authentication token.
  GITHUB_TOKEN:
    description: >
      GitHub authentication token with permissions to push 
      to the R package's GitHub repository. 
      Also used to bypass GitHub download limits.
      Can be passed in using {{ secrets.PAT_GITHUB }}.
  cache_version: 
    description: >
      Which cache version to use. 
      Change this when trying to avoid using previous caches.
    default: cache-v1 
  runner_os:
    description: >
      The Operating System (OS) that the workflow is running on.
    default: 'Linux'
runs:
  using: 'composite'
  steps:
    - name: Set GitHub environment variables 
      run: |
        echo "GITHUB_PAT=${{ inputs.GITHUB_TOKEN }}" >> $GITHUB_ENV 
        echo "GITHUB_TOKEN=${{ inputs.GITHUB_TOKEN }}" >> $GITHUB_ENV 
        echo "RGL_USE_NULL=TRUE" >> $GITHUB_ENV 
        echo "R_REMOTES_NO_ERRORS_FROM_WARNINGS=${{ true }}" >> $GITHUB_ENV 
        echo "RSPM=${{ matrix.config.rspm }}" >> $GITHUB_ENV
        echo "TZ=UTC" >> $GITHUB_ENV
        echo "NOT_CRAN=${{ !inputs.as_cran }}" >> $GITHUB_ENV
      shell: bash {0}
    
    ## Set the R library to the directory matching the
    ## R packages cache step further below when running on Docker (Linux).
    - name: Set R library home on Linux 
      if: inputs.runner_os == 'Linux'
      run: |
        mkdir -p /__w/_temp/Library
        echo ".libPaths('/__w/_temp/Library')" > ~/.Rprofile
        git config --global --add safe.directory '*'
      shell: bash {0}

    ## Most of these steps are the same as the ones in
    ## https://github.com/r-lib/actions/blob/master/examples/check-standard.yaml
    ## If they update their steps, we will also need to update ours.
    - name: Checkout repository
      uses: actions/checkout@v3
    
    ## R is already included in the Bioconductor docker image,
    ## which is only available with Linux as the OS.
    - name: Setup R from r-lib
      if: inputs.runner_os != 'Linux'
      uses: r-lib/actions/setup-r@v2
      with:
        r-version: ${{ matrix.config.r }}
        http-user-agent: ${{ matrix.config.http-user-agent }}

    ## pandoc is already included in the Bioconductor docker images
    - name: Setup pandoc from r-lib
      if: inputs.runner_os != 'Linux'
      uses: r-lib/actions/setup-pandoc@v2

    - name: Query dependencies
      run: |
        options(crayon.enabled = TRUE)
        install.packages('remotes')
        saveRDS(remotes::dev_package_deps(dependencies = TRUE), ".github/depends.Rds", version = 2)
      shell: Rscript {0}

    - name: Restore R package cache
      if: "!contains(github.event.head_commit.message, '/nocache') && inputs.runner_os != 'Linux'"
      uses: actions/cache@v3
      with:
        path: ${{ env.R_LIBS_USER }}
        key: ${{ inputs.cache_version }}-${{ inputs.runner_os }}-biocversion-${{ matrix.config.bioc }}-r-${{ matrix.config.r }}-${{ hashFiles('.github/depends.Rds') }}
        restore-keys: ${{ inputs.cache_version }}-${{ inputs.runner_os }}-biocversion-${{ matrix.config.bioc }}-r-${{  matrix.config.r }}-

    - name: Cache R packages on Linux
      if: "!contains(github.event.head_commit.message, '/nocache') && inputs.runner_os == 'Linux' "
      uses: actions/cache@v3
      with:
        path: /home/runner/work/_temp/Library
        key: ${{ inputs.cache_version }}-${{ inputs.runner_os }}-biocversion-${{ matrix.config.bioc }}-r-${{  matrix.config.r }}-${{ hashFiles('.github/depends.Rds') }}
        restore-keys: ${{ inputs.cache_version }}-${{ inputs.runner_os }}-biocversion-${{ matrix.config.bioc }}-r-${{  matrix.config.r }}-

    - name: Install Linux system dependencies
      if: inputs.runner_os == 'Linux'
      run: |
        sysreqs=$(Rscript -e 'cat("apt-get update -y && apt-get install -y", paste(gsub("apt-get install -y ", "", remotes::system_requirements("ubuntu", "20.04")), collapse = " "))')
        echo $sysreqs
        sudo -s eval "$sysreqs"
        sudo apt-get install -y qpdf rsync
      shell: bash {0}

    - name: Install macOS system dependencies
      if: matrix.config.os == 'macOS-latest'
      run: |
        #### --- Justifications for each package --- ####
        ### libxml2 ###
        # Enable installing XML from source if needed
        ### imagemagick@6 ###
        # Required to install magick as noted at
        # https://github.com/r-lib/usethis/commit/f1f1e0d10c1ebc75fd4c18fa7e2de4551fd9978f#diff-9bfee71065492f63457918efcd912cf2
        ### harfbuzz fribidi ###
        # For textshaping, required by ragg, and required by pkgdown
        ### libgit2 ###
        # For installing usethis's dependency gert
        ### xquartz --cask ###
        # Required for tcltk 
        ### libxfont ###
        # Required for some ggplot2 functions  
        ### texlive ###
        # Required for rendering Sweave files (even with r-lib/actions/setup-tinytex)
        
        #### --- Install packages --- ####
        ### Install normally ###
        brew install libxml2 imagemagick@6 harfbuzz fribidi libgit2 texlive
        ### Install via cask ###
        brew install xquartz --cask 
        ### Set up xml2 ###
        echo "XML_CONFIG=/usr/local/opt/libxml2/bin/xml2-config" >> $GITHUB_ENV 
      shell: bash {0}

    - name: Install Windows system dependencies
      if: inputs.runner_os == 'Windows'
      run: |
        #### npm ####
        npm install curl 
      shell: bash {0}
      
    - name: Install latex
      uses: r-lib/actions/setup-tinytex@v2 
      env:
          # install full prebuilt version
          TINYTEX_INSTALLER: TinyTeX

    - name: Install BiocManager
      run: |
        options(crayon.enabled = TRUE)
        message(paste('****', Sys.time(), 'installing BiocManager ****'))
        remotes::install_cran("BiocManager", upgrade = "never")
      shell: Rscript {0}

    ## Linux Bioconductor docker comes with bioconductor installed
    - name: Set BiocVersion
      if: inputs.runner_os != 'Linux'
      run: |
        options(crayon.enabled = TRUE)
        #### BiocManager::install doesn't understand "latest" #####
        if("${{ matrix.config.bioc }}" %in% c("latest","release")){
          BiocManager::install(update = TRUE, ask = FALSE)
        } else {
          BiocManager::install(version = "${{ matrix.config.bioc }}", ask = FALSE)
        }
      shell: Rscript {0}

    - name: Install dependencies pass 1
      run: |
         ## Try installing the package dependencies in steps. First the local
         ## dependencies, then any remaining dependencies to avoid the
         ## issues described at
         ## https://stat.ethz.ch/pipermail/bioc-devel/2020-April/016675.html
         ## https://github.com/r-lib/remotes/issues/296
         ## Ideally, all dependencies should get installed in the first pass.

         ## Set the repos source depending on the OS
         ## Alternatively use https://storage.googleapis.com/bioconductor_docker/packages/
         ## though based on https://bit.ly/bioc2021-package-binaries
         ## the Azure link will be the main one going forward.
         options(crayon.enabled = TRUE)
         bioc_ver <- BiocManager::version()
         gha_repos <- if(
             .Platform$OS.type == "unix" && Sys.info()["sysname"] != "Darwin"
         ) c(
             "AnVIL" = file.path("https://bioconductordocker.blob.core.windows.net/packages",bioc_ver,"bioc"),
             BiocManager::repositories()
             ) else BiocManager::repositories()

         ## For running the checks
         message(paste('****', Sys.time(), 'installing rcmdcheck and BiocCheck ****'))
         install.packages(c("rcmdcheck", "BiocCheck","rmarkdown"), repos = gha_repos)

         ## Pass #1 at installing dependencies
         ## This pass uses AnVIL-powered fast binaries
         ## details at https://github.com/nturaga/bioc2021-bioconductor-binaries
         ## The speed gains only apply to the docker builds.
         message(paste('****', Sys.time(), 'pass number 1 at installing dependencies: local dependencies ****'))
         remotes::install_local(dependencies = TRUE, repos = gha_repos, build_vignettes = FALSE, upgrade = TRUE)
      continue-on-error: true
      shell: Rscript {0}

    - name: Install dependencies pass 2
      run: |
        ## Pass #2 at installing dependencies
        ## This pass does not use AnVIL and will thus update any packages
        ## that have seen been updated in Bioconductor
        options(crayon.enabled = TRUE)
        message(paste('****', Sys.time(), 'pass number 2 at installing dependencies: any remaining dependencies ****'))
        remotes::install_local(dependencies = TRUE, repos = BiocManager::repositories(), build_vignettes = TRUE, upgrade = TRUE, force = TRUE)
      continue-on-error: true
      shell: Rscript {0}

    - name: Install dependencies pass 3
      run: |
        ## Pass #3 at installing dependencies
        ## Install via binaries
        options(crayon.enabled = TRUE)
        message(paste('****', Sys.time(), 'pass number 3 at installing dependencies: any remaining dependencies ****'))
        remotes::install_local(type = "binary", dependencies = TRUE, repos = BiocManager::repositories(), build_vignettes = FALSE, upgrade = TRUE, force = TRUE)
      shell: Rscript {0}

    - name: Install BiocGenerics
      if:  inputs.has_runit == 'true'
      run: |
        ## Install BiocGenerics
        options(crayon.enabled = TRUE)
        BiocManager::install("BiocGenerics")
      shell: Rscript {0}

    - name: Install covr
      if: inputs.run_covr == 'true' && inputs.runner_os == 'Linux'
      run: |
        options(crayon.enabled = TRUE)
        install.packages("covr") 
      shell: Rscript {0}

    - name: Install pkgdown
      if: inputs.run_pkgdown == 'true' && inputs.runner_os == 'Linux'
      run: |
        options(crayon.enabled = TRUE)
        install.packages("pkgdown")
      shell: Rscript {0}

    - name: Session info
      run: |
        options(width = 100, crayon.enabled = TRUE)
        pkgs <- installed.packages()[, "Package"]
        if(!require("sessioninfo")) install.packages("sessioninfo")
        tryCatch({
          sessioninfo::session_info(pkgs, include_base = TRUE)
        }, error = function(x){utils::sessionInfo()})
      shell: Rscript {0}

    - name: Run CMD check
      if: inputs.run_rcmdcheck == 'true'
      env:
        _R_CHECK_CRAN_INCOMING_: false
        RGL_USE_NULL: ${{ env.RGL_USE_NULL }}
        DISPLAY: 99.0
        AS_CRAN: ${{ inputs.as_cran }}
        run_vignettes: ${{ inputs.run_vignettes }}
      run: |
        options(crayon.enabled = TRUE)
        if(!require("rcmdcheck")) install.packages("rcmdcheck")
        as_cran <- if(Sys.getenv("AS_CRAN")=='true') "--as-cran" else NULL
        run_vignettes <- if(Sys.getenv("run_vignettes")=='true') NULL else "--ignore-vignettes"
        rcmdcheck::rcmdcheck(
            args = c("--no-manual", "--timings", as_cran, run_vignettes),
            build_args = c("--no-manual", "--keep-empty-dirs", "--no-resave-data"),
            error_on = "warning",
            check_dir = "check")
      shell: Rscript {0}
        
    - name: Reveal testthat details
      if: inputs.has_testthat == 'true'
      run: |
        find . -name testthat.Rout -exec cat '{}' ';'
      shell: bash {0}
        
    - name: Run RUnit tests
      if: inputs.has_runit == 'true'
      run: |
        options(crayon.enabled = TRUE)
        BiocGenerics:::testPackage()
      shell: Rscript {0}
        
    - name: Run BiocCheck
      if: inputs.run_bioccheck == 'true'
      env:
        DISPLAY: 99.0
        RGL_USE_NULL: ${{ env.RGL_USE_NULL }}
        run_vignettes: ${{ inputs.run_vignettes }}
      run: |
        options(crayon.enabled = TRUE)
        if(!require("BiocManager")) install.packages("BiocManager")
        if(!require("BiocCheck")) BiocManager::install("BiocCheck")
        no_check_vignettes <- Sys.getenv("run_vignettes")=='true'
        BiocCheck::BiocCheck(
            dir('check', 'tar.gz$', full.names = TRUE),
            `quit-with-status` = TRUE,
            `no-check-R-ver` = TRUE,
            `no-check-bioc-help` = TRUE,
            `no-check-vignettes` = no_check_vignettes)
      shell: Rscript {0}
        
    - name: Test coverage
      if: inputs.runner_os == 'Linux'
      uses: codecov/codecov-action@v3 

    - name: Install package
      if: inputs.run_pkgdown == 'true' && inputs.runner_os == 'Linux'
      run: R CMD INSTALL .
      shell: bash {0}

    - name: Get R package info
      if: inputs.runner_os == 'Linux'
      run: |
        #### DockerHub repos must be lowercase (,,) ####
        name=$(grep '^Package:' DESCRIPTION | cut -d\   -f2)
        echo "packageName=${name,,}" >> $GITHUB_ENV
        echo "packageNameOrig=${name}" >> $GITHUB_ENV
        echo $name
        version=$(grep Version DESCRIPTION | grep -o "[0-9.]\+")
        echo "packageVersion=${version}" >> $GITHUB_ENV
        echo $version
      shell: bash {0}

    - name: Render README
      if: inputs.run_pkgdown == 'true' && inputs.runner_os == 'Linux'
      env:
        DISPLAY: 99.0
      run: |
        if(file.exists("README.Rmd")){
          options(crayon.enabled = TRUE)
          if(!require("rmarkdown")) install.packages("rmarkdown");
          rmarkdown::render("README.Rmd", output_format = rmarkdown::github_document(html_preview = FALSE));
        }
      shell: Rscript {0} 
        
    - name: Build pkgdown site
      if: inputs.run_pkgdown == 'true' && inputs.runner_os == 'Linux'
      run: |
        pkgdown::build_site_github_pages(new_process = FALSE, install = FALSE)
      shell: Rscript {0}
        
    - name: Deploy pkgdown site to GitHub pages 🚀
      if: inputs.run_pkgdown == 'true' && inputs.runner_os == 'Linux'
      uses: JamesIves/github-pages-deploy-action@releases/v4
      with:
        clean: false
        branch: gh-pages
        folder: docs
        token: ${{ inputs.GITHUB_TOKEN }}

    - name: Upload check results
      if: failure()
      uses: actions/upload-artifact@v2
      with:
        name: ${{ inputs.runner_os }}-biocversion-${{ matrix.config.bioc }}-r-${{  matrix.config.r }}-results
        path: check 
        
    ## DockerHub steps
    - name: Create Docker file
      if: "(!contains(github.event.head_commit.message, '/nodocker')) && inputs.run_docker == 'true' && inputs.runner_os == 'Linux'"
      run: |
        options(crayon.enabled = TRUE)
        if(!require("rworkflows")) remotes::install_github("neurogenomics/rworkflows")
        path <- rworkflows::use_dockerfile()
      shell: Rscript {0} 
      
    - name: Build and push to DockerHub
      if: "(!contains(github.event.head_commit.message, '/nodocker')) && inputs.run_docker == 'true' && inputs.runner_os == 'Linux'"
      uses: docker/build-push-action@v1
      with:
        username: ${{ inputs.docker_user }}
        password: ${{ inputs.DOCKER_TOKEN }}
        repository: ${{ inputs.docker_org }}/${{ env.packageName }}
        tag_with_ref: true
        tag_with_sha: false
        tags: ${{ env.packageVersion }},latest
        build_args: PKG=${{ env.packageNameOrig }}
